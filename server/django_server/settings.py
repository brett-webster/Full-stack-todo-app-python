# pylint: disable=line-too-long

"""
Django settings for django_server project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os  # used for .env variables
from dotenv import load_dotenv  # used to import in .env variables -- python3 -m pip install python-dotenv

# ----------

load_dotenv()  # grab environment variables from .env file

# grab environment variables from package.json to configure DEBUG / static files
env = os.getenv('PYTHON_ENV')

# grab environment variables from .env file to configure PostgreSQL database
db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
db_host = os.getenv('DB_HOST')
db_port = os.getenv('DB_PORT')
db_name = os.getenv('DB_NAME')

# ----------

# Note: Generally good practice to add 'settings.py' to .gitignore file, but using .env file for sensitive data (e.g., DB connection string, SECRET_KEY) instead for illustrative purposes

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # /Users/sarahkhuwaja/brett/Full-stack-todo-app-python/server

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
if env == 'production': # production mode only
    DEBUG = False
else:
    DEBUG = True
    INTERNAL_IPS: list[str] = ['localhost', '127.0.0.1']  # need to add this line once django-debug-toolbar is installed, to include the IP addresses allowed to see the toolbar in dev mode ONLY


ALLOWED_HOSTS: list[str] = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sessions',
    'django_app',  # need to add this line to register / include the Django app in the larger project
    'debug_toolbar',  # need to add this line once django-debug-toolbar is installed
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # need to add this line once django-debug-toolbar is installed (after CommonMiddleware)
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # add this line to specify the location of the templates directory (in the BASE_DIR i.e. /server folder or 'project root directory')
        'APP_DIRS': True,  # looks for templates in each app directory
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Run 'python3 server/manage.py collectstatic' if in production environment. This command copies all files from static folders (i.e. /dist/assets), placing copy into STATIC_ROOT directory (i.e. /server/staticfiles) to then be used for production deployment (see bottom of 'server/django_server/urls.py')
STATIC_URL = 'static/'  # URL path to serve static files (e.g., images, CSS, JS) -- http://localhost:3000/static/...
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # run 'python server/manage.py collectstatic' via CLI script for production mode ONLY to copy all static files from the static file directories (defined in STATICFILES_DIRS) to then use for deployment
STATICFILES_DIRS = [os.path.join(BASE_DIR, '../dist/assets')]  # folder bundle from which to source static files (e.g., images, CSS, JS), created by Vite


# Cookies configuration (see 'views.py' for setting of cookie)
CSRF_COOKIE_HTTPONLY = False  # setting to False because need to access CSRF token via JavaScript
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'Strict'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
